<!-- source: 
  https://javascript.info/websocket
  https://stackoverflow.com/questions/58337243/canvas-touch-event-js
-->
<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Camera Robot</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #181818;
            color: #EFEFEF;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 12px;
        }

        section.main {
            display: flex;
            width: 320px;
            margin: 0 auto 0 auto;
            flex-direction: column;
        }

        #stream-container {
            display: flex;
        }

        #stream {
            display: block;
            width: 320px;
            height: 213px;
            border-radius: 4px;
            margin: 4px 0 0 0;
        }

        #control-container {
            display: flex;
            flex-direction: row;
        }

        #touchcanvas {
            display: block;
            border-radius: 4px;
            margin: 4px 0 0 4px;
        }

        #menu {
            display: none;
            flex-wrap: nowrap;
            min-width: 304px;
            background: #363636;
            padding: 8px;
            border-radius: 4px;
            margin: -10px 0 0 0;
            flex-direction: column;
        }

        #content {
            display: flex;
            flex-wrap: wrap;
            align-items: stretch;
        }

        section#buttons {
            display: flex;
            flex-wrap: nowrap;
            justify-content: space-between;
        }

        #nav-toggle {
            cursor: pointer;
            display: block;
        }

        #nav-toggle-cb {
            outline: 0;
            opacity: 0;
            width: 0;
            height: 0;
        }

        #nav-toggle-cb:checked+#menu {
            display: flex;
        }

        .btn-group {
            display: flex;
            flex-direction: column;
            width: 65px;
            height: auto;
        }

        .control-box {
            background: #363636;
            padding: 4px;
            border-radius: 4px;
            width: auto;
            height: auto;
            margin: 4px 0 0 0;
            font-size: 14px;
        }

        .control-splitter {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        label {
            display: inline-block;
        }

        input {
            flex-grow: 1;
        }

        .input-group {
            display: flex;
            flex-wrap: nowrap;
            line-height: 22px;
            margin: 5px 0;
        }

        .input-group>label {
            display: inline-block;
            padding-right: 10px;
            min-width: 40%;
        }

        .input-group input,
        .input-group select {
            flex-grow: 1;
        }

        .range-max,
        .range-min {
            display: inline-block;
            padding: 0 5px;
        }

        button {
            display: block;
            margin: 5px;
            padding: 0 12px;
            border: 0;
            line-height: 28px;
            cursor: pointer;
            color: #fff;
            background: #ff3034;
            border-radius: 5px;
            font-size: 12px;
            outline: 0;
        }

        button:hover {
            background: #ff494d;
        }

        button:active {
            background: #f21c21;
        }

        button.disabled {
            cursor: default;
            background: #a0a0a0;
        }

        input[type=range] {
            -webkit-appearance: none;
            width: 100%;
            height: 22px;
            background: #363636;
            cursor: pointer;
            margin: 0;
        }

        input[type=range]:focus {
            outline: 0;
        }

        input[type=range]::-webkit-slider-runnable-track {
            width: 100%;
            height: 2px;
            cursor: pointer;
            background: #EFEFEF;
            border-radius: 0;
            border: 0 solid #EFEFEF;
        }

        input[type=range]::-webkit-slider-thumb {
            border: 1px solid rgba(0, 0, 30, 0);
            height: 22px;
            width: 22px;
            border-radius: 50px;
            background: #ff3034;
            cursor: pointer;
            -webkit-appearance: none;
            margin-top: -11.5px;
        }

        input[type=range]:focus::-webkit-slider-runnable-track {
            background: #EFEFEF;
        }

        input[type=range]::-moz-range-track {
            width: 100%;
            height: 2px;
            cursor: pointer;
            background: #EFEFEF;
            border-radius: 0;
            border: 0 solid #EFEFEF;
        }

        input[type=range]::-moz-range-thumb {
            border: 1px solid rgba(0, 0, 30, 0);
            height: 22px;
            width: 22px;
            border-radius: 50px;
            background: #ff3034;
            cursor: pointer;
        }

        input[type=range]::-ms-track {
            width: 100%;
            height: 2px;
            cursor: pointer;
            background: 0 0;
            border-color: transparent;
            color: transparent;
        }

        input[type=range]::-ms-fill-lower {
            background: #EFEFEF;
            border: 0 solid #EFEFEF;
            border-radius: 0;
        }

        input[type=range]::-ms-fill-upper {
            background: #EFEFEF;
            border: 0 solid #EFEFEF;
            border-radius: 0;
        }

        input[type=range]::-ms-thumb {
            border: 1px solid rgba(0, 0, 30, 0);
            height: 22px;
            width: 22px;
            border-radius: 50px;
            background: #ff3034;
            cursor: pointer;
            height: 2px;
        }

        input[type=range]:focus::-ms-fill-lower {
            background: #EFEFEF;
        }

        input[type=range]:focus::-ms-fill-upper {
            background: #363636;
        }

        .switch {
            display: block;
            position: relative;
            line-height: 22px;
            font-size: 12px;
            height: 22px;
            margin-left: -10px;
        }

        .switch input {
            outline: 0;
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            width: 50px;
            height: 22px;
            border-radius: 22px;
            cursor: pointer;
            background-color: grey;
        }

        .slider,
        .slider:before {
            display: inline-block;
            transition: .4s;
        }

        .slider:before {
            position: relative;
            content: "";
            border-radius: 50%;
            height: 16px;
            width: 16px;
            left: 4px;
            top: 3px;
            background-color: #fff;
        }

        input:checked+.slider {
            background-color: #ff3034;
        }

        input:checked+.slider:before {
            -webkit-transform: translateX(26px);
            transform: translateX(26px);
        }

        select {
            border: 1px solid #363636;
            font-size: 12px;
            height: 22px;
            outline: 0;
            border-radius: 5px;
        }

        #image-container {
            position: relative;
            min-width: 320px;
            min-height: 213px;
        }

        .hidden {
            display: none;
        }
    </style>
</head>

<body>
    <section class="main">
        <div id="stream-container">
            <img id="stream" src="">
        </div>
        <div id="control-container">
            <div class="btn-group">
                <div class="control-box">
                    <label for="led">LED</label>
                    <div class="switch">
                        <input id="led" type="checkbox" class="led-action">
                        <label class="slider" for="led"></label>
                    </div>
                </div>

                <div class="control-splitter">
                </div>

                <div class="control-box">
                    <label for="nav-toggle-cb" id="nav-toggle">Camera<br>Menu&nbsp;&#9776;</label>
                </div>
            </div>
            <canvas id='touchcanvas' width='255' height='255'></canvas>
        </div>
        <div id="content">
            <div id="sidebar">
                <input type="checkbox" id="nav-toggle-cb">
                <nav id="menu">
                    <div class="input-group" id="framesize-group">
                        <label for="framesize">Resolution</label>
                        <select id="framesize" class="default-action">
                            <option value="13">UXGA(1600x1200)</option>
                            <option value="12">SXGA(1280x1024)</option>
                            <option value="11">HD(1280x720)</option>
                            <option value="10">XGA(1024x768)</option>
                            <option value="9">SVGA(800x600)</option>
                            <option value="8">VGA(640x480)</option>
                            <option value="7">HVGA(480x320)</option>
                            <option value="6">CIF(400x296)</option>
                            <option value="5" selected="selected">QVGA(320x240)</option>
                            <option value="4">SQUARE(240x240)</option>
                            <option value="3">HQVGA(240x176)</option>
                            <option value="2">QCIF(176x144)</option>
                            <option value="1">QQVGA(160x120)</option>
                            <option value="0">SQUARE(96x96)</option>
                        </select>
                    </div>
                    <div class="input-group" id="quality-group">
                        <label for="quality">Quality</label>
                        <div class="range-min">10</div>
                        <input type="range" id="quality" min="10" max="63" value="10" class="default-action">
                        <div class="range-max">63</div>
                    </div>
                    <div class="input-group" id="brightness-group">
                        <label for="brightness">Brightness</label>
                        <div class="range-min">-2</div>
                        <input type="range" id="brightness" min="-2" max="2" value="0" class="default-action">
                        <div class="range-max">2</div>
                    </div>
                    <div class="input-group" id="contrast-group">
                        <label for="contrast">Contrast</label>
                        <div class="range-min">-2</div>
                        <input type="range" id="contrast" min="-2" max="2" value="0" class="default-action">
                        <div class="range-max">2</div>
                    </div>
                    <div class="input-group" id="saturation-group">
                        <label for="saturation">Saturation</label>
                        <div class="range-min">-2</div>
                        <input type="range" id="saturation" min="-2" max="2" value="0" class="default-action">
                        <div class="range-max">2</div>
                    </div>
                    <div class="input-group" id="special_effect-group">
                        <label for="special_effect">Special Effect</label>
                        <select id="special_effect" class="default-action">
                            <option value="0" selected="selected">No Effect</option>
                            <option value="1">Negative</option>
                            <option value="2">Grayscale</option>
                            <option value="3">Red Tint</option>
                            <option value="4">Green Tint</option>
                            <option value="5">Blue Tint</option>
                            <option value="6">Sepia</option>
                        </select>
                    </div>
                    <div class="input-group" id="awb-group">
                        <label for="awb">AWB</label>
                        <div class="switch">
                            <input id="awb" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="awb"></label>
                        </div>
                    </div>
                    <div class="input-group" id="awb_gain-group">
                        <label for="awb_gain">AWB Gain</label>
                        <div class="switch">
                            <input id="awb_gain" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="awb_gain"></label>
                        </div>
                    </div>
                    <div class="input-group" id="wb_mode-group">
                        <label for="wb_mode">WB Mode</label>
                        <select id="wb_mode" class="default-action">
                            <option value="0" selected="selected">Auto</option>
                            <option value="1">Sunny</option>
                            <option value="2">Cloudy</option>
                            <option value="3">Office</option>
                            <option value="4">Home</option>
                        </select>
                    </div>
                    <div class="input-group" id="aec-group">
                        <label for="aec">AEC SENSOR</label>
                        <div class="switch">
                            <input id="aec" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="aec"></label>
                        </div>
                    </div>
                    <div class="input-group" id="aec2-group">
                        <label for="aec2">AEC DSP</label>
                        <div class="switch">
                            <input id="aec2" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="aec2"></label>
                        </div>
                    </div>
                    <div class="input-group" id="ae_level-group">
                        <label for="ae_level">AE Level</label>
                        <div class="range-min">-2</div>
                        <input type="range" id="ae_level" min="-2" max="2" value="0" class="default-action">
                        <div class="range-max">2</div>
                    </div>
                    <div class="input-group" id="aec_value-group">
                        <label for="aec_value">Exposure</label>
                        <div class="range-min">0</div>
                        <input type="range" id="aec_value" min="0" max="1200" value="204" class="default-action">
                        <div class="range-max">1200</div>
                    </div>
                    <div class="input-group" id="agc-group">
                        <label for="agc">AGC</label>
                        <div class="switch">
                            <input id="agc" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="agc"></label>
                        </div>
                    </div>
                    <div class="input-group hidden" id="agc_gain-group">
                        <label for="agc_gain">Gain</label>
                        <div class="range-min">1x</div>
                        <input type="range" id="agc_gain" min="0" max="30" value="5" class="default-action">
                        <div class="range-max">31x</div>
                    </div>
                    <div class="input-group" id="gainceiling-group">
                        <label for="gainceiling">Gain Ceiling</label>
                        <div class="range-min">2x</div>
                        <input type="range" id="gainceiling" min="0" max="6" value="0" class="default-action">
                        <div class="range-max">128x</div>
                    </div>
                    <div class="input-group" id="bpc-group">
                        <label for="bpc">BPC</label>
                        <div class="switch">
                            <input id="bpc" type="checkbox" class="default-action">
                            <label class="slider" for="bpc"></label>
                        </div>
                    </div>
                    <div class="input-group" id="wpc-group">
                        <label for="wpc">WPC</label>
                        <div class="switch">
                            <input id="wpc" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="wpc"></label>
                        </div>
                    </div>
                    <div class="input-group" id="raw_gma-group">
                        <label for="raw_gma">Raw GMA</label>
                        <div class="switch">
                            <input id="raw_gma" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="raw_gma"></label>
                        </div>
                    </div>
                    <div class="input-group" id="lenc-group">
                        <label for="lenc">Lens Correction</label>
                        <div class="switch">
                            <input id="lenc" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="lenc"></label>
                        </div>
                    </div>
                    <div class="input-group" id="hmirror-group">
                        <label for="hmirror">H-Mirror</label>
                        <div class="switch">
                            <input id="hmirror" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="hmirror"></label>
                        </div>
                    </div>
                    <div class="input-group" id="vflip-group">
                        <label for="vflip">V-Flip</label>
                        <div class="switch">
                            <input id="vflip" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="vflip"></label>
                        </div>
                    </div>
                    <div class="input-group" id="dcw-group">
                        <label for="dcw">DCW (Downsize EN)</label>
                        <div class="switch">
                            <input id="dcw" type="checkbox" class="default-action" checked="checked">
                            <label class="slider" for="dcw"></label>
                        </div>
                    </div>
                    <div class="input-group" id="colorbar-group">
                        <label for="colorbar">Color Bar</label>
                        <div class="switch">
                            <input id="colorbar" type="checkbox" class="default-action">
                            <label class="slider" for="colorbar"></label>
                        </div>
                    </div>
                    <section id="buttons">
                        <button id="get-still">Get Still</button>
                        <button id="toggle-stream">Start Stream</button>
                    </section>
                </nav>
            </div>
        </div>

        <div>
            <p>Output: <span id="output"></span></p>
        </div>
    </section>

    <script>
        document.addEventListener('DOMContentLoaded', function (event) {
            var hostName = window.location.hostname;

            const hide = el => {
                el.classList.add('hidden');
            };
            const show = el => {
                el.classList.remove('hidden');
            };

            const disable = el => {
                el.classList.add('disabled');
                el.disabled = true;
            };

            const enable = el => {
                el.classList.remove('disabled');
                el.disabled = false;
            };

            const updateValue = (el, value, updateRemote) => {
                updateRemote = updateRemote == null ? true : updateRemote;
                let initialValue;
                if (el.type === 'checkbox') {
                    initialValue = el.checked;
                    value = !!value;
                    el.checked = value;
                } else {
                    initialValue = el.value;
                    el.value = value;
                };

                if (updateRemote && initialValue !== value) {
                    updateConfig(el);
                } else if (!updateRemote) {
                    if (el.id === "aec") {
                        value ? hide(exposure) : show(exposure);
                    } else if (el.id === "agc") {
                        if (value) {
                            show(gainCeiling);
                            hide(agcGain);
                        } else {
                            hide(gainCeiling);
                            show(agcGain);
                        }
                    } else if (el.id === "awb_gain") {
                        value ? show(wb) : hide(wb);
                    }
                }
            };

            function updateLed(el) {
                let value = el.checked ? 1 : 0;
                const query = `http://${hostName}/gpio?pin=4&val=${value}`;
                fetch(query)
                    .then(response => {
                        console.log(`request to ${query} finished, status: ${response.status}`);
                    });
            }

            function updateConfig(el) {
                let value;
                switch (el.type) {
                    case 'checkbox':
                        value = el.checked ? 1 : 0;
                        break;
                    case 'range':
                    case 'select-one':
                        value = el.value;
                        break;
                    case 'button':
                    case 'submit':
                        value = '1';
                        break;
                    default:
                        return;
                }

                const query = `http://${hostName}/control?var=${el.id}&val=${value}`;

                fetch(query)
                    .then(response => {
                        console.log(`request to ${query} finished, status: ${response.status}`);
                    });
            }

            // read initial values
            fetch(`http://${hostName}/status`)
                .then(function (response) {
                    return response.json();
                })
                .then(function (state) {
                    document
                        .querySelectorAll('.default-action')
                        .forEach(el => {
                            updateValue(el, state[el.id], false);
                        });
                });

            const view = document.getElementById('stream');
            const viewContainer = document.getElementById('stream-container');
            const stillButton = document.getElementById('get-still');
            const streamButton = document.getElementById('toggle-stream');

            const stopStream = () => {
                window.stop();
                streamButton.innerHTML = 'Start Stream';
            };

            const startStream = () => {
                view.src = `http://${hostName}:81/stream`;
                show(viewContainer);
                streamButton.innerHTML = 'Stop Stream';
            };

            // Attach actions to buttons
            stillButton.onclick = () => {
                stopStream();
                view.src = `http://${hostName}/snap?${Date.now()}`;
                show(viewContainer);
            };

            streamButton.onclick = () => {
                const streamEnabled = streamButton.innerHTML === 'Stop Stream';
                if (streamEnabled) {
                    stopStream();
                } else {
                    startStream();
                }
            };

            document
                .querySelectorAll('.led-action')
                .forEach(el => {
                    el.onchange = () => updateLed(el);
                });

            // Attach default on change action
            document
                .querySelectorAll('.default-action')
                .forEach(el => {
                    el.onchange = () => updateConfig(el);
                });

            // Custom actions
            // Gain
            const agc = document.getElementById('agc');
            const agcGain = document.getElementById('agc_gain-group');
            const gainCeiling = document.getElementById('gainceiling-group');
            agc.onchange = () => {
                updateConfig(agc);
                if (agc.checked) {
                    show(gainCeiling);
                    hide(agcGain);
                } else {
                    hide(gainCeiling);
                    show(agcGain);
                }
            };

            // Exposure
            const aec = document.getElementById('aec');
            const exposure = document.getElementById('aec_value-group');
            aec.onchange = () => {
                updateConfig(aec);
                aec.checked ? hide(exposure) : show(exposure);
            };

            // AWB
            const awb = document.getElementById('awb_gain');
            const wb = document.getElementById('wb_mode-group');
            awb.onchange = () => {
                updateConfig(awb);
                awb.checked ? show(wb) : hide(wb);
            };

            // framesize
            const framesize = document.getElementById('framesize');

            framesize.onchange = () => {
                updateConfig(framesize);
            };

            // Touch Remote
            let ws = undefined;
            let isSending = false;
            let hasPendingMsg = false;
            let mouseDowned = false;
            let la = 0, lb = 0, ra = 0, rb = 0;

            let cv = document.getElementById('touchcanvas');
            let ctx = cv.getContext('2d');
            let ctop = cv.offsetTop;
            let cleft = cv.offsetLeft;

            var img = new Image();
            img.onload = function () {
                clearCanvas();
            }
            img.src = `http://${hostName}/arrows.svg`;

            function clearCanvas() {
                ctx.fillStyle = '#fff';
                ctx.rect(0, 0, 255, 255);
                ctx.fill();
                ctx.drawImage(img, 0, 0);
            }

            function sendMessage(outgoingMessage) {
                if ((!ws) || (ws.readyState === ws.CLOSED)) { ws = nws(); }
                if (!isSending) {
                    output.innerHTML = outgoingMessage;
                    isSending = true;
                    ws.send(outgoingMessage);
                } else {
                    hasPendingMsg = true;
                    output.innerHTML = "pending";
                }
            }
            function sendMotor() {
                sendMessage('MOTOR:' + la.substr(-2) + ':' + lb.substr(-2) + ':' + ra.substr(-2) + ':' + rb.substr(-2));
            }

            function updateMotor(x, y) {
                la = 0, lb = 0, ra = 0, rb = 0;
                if (y < 112) { // forward
                    if (x > 144) {
                        lb = (255 - y);
                        rb = lb - (x - 128);
                    } else if (x < 112) {
                        rb = (255 - y);
                        lb = rb - (128 - x);
                    } else {
                        lb = (255 - y);
                        rb = lb;
                    }
                } else if (y > 144) { // backward
                    if (x > 144) {
                        la = y;
                        ra = la - (x - 128);
                    } else if (x < 112) {
                        ra = y;
                        la = ra - (128 - x);
                    } else {
                        la = y;
                        ra = la;
                    }
                } else {
                    if (x > 144) {
                        lb = x;
                        ra = lb;
                    } else if (x < 112) {
                        rb = (255 - x);
                        la = rb;
                    }
                }
                la = '0' + la.toString(16);
                lb = '0' + lb.toString(16);
                ra = '0' + ra.toString(16);
                rb = '0' + rb.toString(16);
                sendMotor();

                ctx.beginPath();
                ctx.fillStyle = 'rgba(255,48,52,0.5)';
                ctx.arc(x, y, 10, 0, Math.PI * 2, true);
                ctx.fill();
                ctx.closePath();
            }

            function move(e) {
                updateMotor(e.clientX - cleft, e.clientY - ctop);
            }

            function touch(e) {
                e.preventDefault();
                let x, y, u = e.touches[0];
                if (u) {
                    updateMotor(u.clientX - cleft, u.clientY - ctop);
                } else {
                    updateMotor(128, 128);
                }
            }

            function nws() {
                let ws = new WebSocket(`ws://${hostName}/ws`, ['arduino']);
                ws.onmessage = function (e) {
                    isSending = false;
                    if (hasPendingMsg) {
                        hasPendingMsg = false;
                        sendMotor();
                    }
                };
                return ws;
            }

            document.ontouchmove = function (e) {
                e.preventDefault();
            };

            cv.ontouchstart = touch;
            cv.ontouchmove = touch;
            cv.ontouchend = function (e) {
                clearCanvas();
                touch(e);
            };
            cv.onmousedown = function (e) {
                mouseDowned = true;
                move(e);
            };
            cv.onmousemove = function (e) {
                if (mouseDowned) {
                    move(e);
                }
            };
            cv.onmouseup = function (e) {
                mouseDowned = false;
                updateMotor(128, 128);
                clearCanvas();
            };

            ws = nws();

            clearCanvas();

            startStream();
        });
    </script>
</body>

</html>